rec_dat <- subset(sbsbf0_recentqs, year==2021)
rec_dat %<>% mutate(year=2022)
# This is total fucking shit
rec_dat1 <- rec_dat %>% select(year, set, X10., X90.) %>% pivot_longer(cols=c(X10., X90.), names_to = "outer", values_to = "y1")
#for (fname in c("all_models", "good_models")){
fname <- "all_models"
model_set <- get(fname)
# Instantaneous
sb_all <- as.data.frame(FLQuants(SB(rep_list[model_set])))
sb_1 <- as.data.frame(FLQuants(SB(reps1[model_set])))
sb_2 <- as.data.frame(FLQuants(SB(reps2[model_set])))
sb_3 <- as.data.frame(FLQuants(SB(reps3[model_set])))
sb_4 <- as.data.frame(FLQuants(SB(reps4[model_set])))
sb_5 <- as.data.frame(FLQuants(SB(reps5[model_set])))
sb_6 <- as.data.frame(FLQuants(SB(reps6[model_set])))
sb_7 <- as.data.frame(FLQuants(SB(reps7[model_set])))
sb_8 <- as.data.frame(FLQuants(SB(reps8[model_set])))
# Put all this together
sb <- rbind(cbind(sb_all, set="All regions"),
cbind(sb_1, set="Region 1"),
cbind(sb_2, set="Region 2"),
cbind(sb_3, set="Region 3"),
cbind(sb_4, set="Region 4"),
cbind(sb_5, set="Region 5"),
cbind(sb_6, set="Region 6"),
cbind(sb_7, set="Region 7"),
cbind(sb_8, set="Region 8"))[,c("year", "data", "qname", "set")]
sb$set<- factor(sb$set, levels=c("Region 1", "Region 2", "Region 3", "Region 4", "Region 5","Region 6","Region 7","Region 8" ,"All regions"))
# Needs units!
p <- ggplot(dat=sb, aes(x=year, y=data/1000))
p <- p + geom_line(aes(group=qname), alpha=0.5)
p <- p + facet_wrap(~set, ncol=2, scales="free")
#p <- p + ylab("Spawning biomass (000s t)") + xlab("Year")
p <- p + ylab("Spawning potential (000s t)") + xlab("Year")
p <- p + theme_bw()
#p <- p + geom_hline(aes(yintercept=0.2), linetype=2)
p <- p + ylim(c(0, NA))
# Add diagnostic
p <- p + geom_line(data=subset(sb, qname==diagnostic), colour="steelblue", size=1.2)
p
# Do quantiles, 10-90 and 20-80
sbqs <- sb %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data / 1000, probs=quantiles, na.rm=TRUE))))
# Get SBSBF=0 recent and latest in final year
sb_recent_all <- as.data.frame(FLQuants(SBrecent(rep_list[model_set])))
sb_recent_1 <- as.data.frame(FLQuants(SBrecent(reps1[model_set])))
sb_recent_2 <- as.data.frame(FLQuants(SBrecent(reps2[model_set])))
sb_recent_3 <- as.data.frame(FLQuants(SBrecent(reps3[model_set])))
sb_recent_4 <- as.data.frame(FLQuants(SBrecent(reps4[model_set])))
sb_recent_5 <- as.data.frame(FLQuants(SBrecent(reps5[model_set])))
sb_recent_6 <- as.data.frame(FLQuants(SBrecent(reps6[model_set])))
sb_recent_7 <- as.data.frame(FLQuants(SBrecent(reps7[model_set])))
sb_recent_8 <- as.data.frame(FLQuants(SBrecent(reps8[model_set])))
# Put all this together
sb_recent <- rbind(cbind(sb_recent_all, set="All regions"),
cbind(sb_recent_1, set="Region 1"),
cbind(sb_recent_2, set="Region 2"),
cbind(sb_recent_3, set="Region 3"),
cbind(sb_recent_4, set="Region 4"),
cbind(sb_recent_5, set="Region 5"),
cbind(sb_recent_5, set="Region 6"),
cbind(sb_recent_5, set="Region 7"),
cbind(sb_recent_5, set="Region 8"))[,c("year", "data", "qname", "set")]
sb_recent$set<- factor(sb$set, levels=c("Region 1", "Region 2", "Region 3", "Region 4", "Region 5","Region 6","Region 7","Region 8", "All regions"))
sb_latest_all <- as.data.frame(FLQuants(SBlatest(rep_list[model_set])))
sb_latest_1 <- as.data.frame(FLQuants(SBlatest(reps1[model_set])))
sb_latest_2 <- as.data.frame(FLQuants(SBlatest(reps2[model_set])))
sb_latest_3 <- as.data.frame(FLQuants(SBlatest(reps3[model_set])))
sb_latest_4 <- as.data.frame(FLQuants(SBlatest(reps4[model_set])))
sb_latest_5 <- as.data.frame(FLQuants(SBlatest(reps5[model_set])))
sb_latest_6 <- as.data.frame(FLQuants(SBlatest(reps6[model_set])))
sb_latest_7 <- as.data.frame(FLQuants(SBlatest(reps7[model_set])))
sb_latest_8 <- as.data.frame(FLQuants(SBlatest(reps8[model_set])))
# Put all this together
sb_latest <- rbind(cbind(sb_latest_all, set="All regions"),
cbind(sb_latest_1, set="Region 1"),
cbind(sb_latest_2, set="Region 2"),
cbind(sb_latest_3, set="Region 3"),
cbind(sb_latest_4, set="Region 4"),
cbind(sb_latest_5, set="Region 5"),
cbind(sb_latest_6, set="Region 6"),
cbind(sb_latest_7, set="Region 7"),
cbind(sb_latest_8, set="Region 8"))[,c("year", "data", "qname", "set")]
sb_latest$set<- factor(sb$set, levels=c("Region 1", "Region 2", "Region 3", "Region 4", "Region 5","Region 6","Region 7","Region 8", "All regions"))
sb_recentqs <- sb_recent %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data/1000, probs=quantiles, na.rm=TRUE))))
sb_latestqs <- sb_latest %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data/1000, probs=quantiles, na.rm=TRUE))))
require(magrittr)
sb_latest$set<- factor(sb$set, levels=c("Region 1", "Region 2", "Region 3", "Region 4", "Region 5","Region 6","Region 7","Region 8", "All regions"))
sb_recentqs <- sb_recent %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data/1000, probs=quantiles, na.rm=TRUE))))
sb_latestqs <- sb_latest %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data/1000, probs=quantiles, na.rm=TRUE))))
rec_dat <- subset(sb_recentqs, year==2021)
rec_dat %<>% mutate(year=2022)
# This is total fucking shit
rec_dat1 <- rec_dat %>% select(year, set, X10., X90.) %>% pivot_longer(cols=c(X10., X90.), names_to = "outer", values_to = "y1")
rec_dat2 <- rec_dat %>% select(year, set, X25., X75.) %>% pivot_longer(cols=c(X25., X75.), names_to = "inner", values_to = "y2")
lat_dat <- subset(sb_latestqs, year==2021)
lat_dat %<>% mutate(year=2023)
lat_dat1 <- lat_dat %>% select(year, set, X10., X90.) %>% pivot_longer(cols=c(X10., X90.), names_to = "outer", values_to = "y1")
lat_dat2 <- lat_dat %>% select(year, set, X25., X75.) %>% pivot_longer(cols=c(X25., X75.), names_to = "inner", values_to = "y2")
p <- ggplot(dat=sbqs, aes(x=year))
p <- p + geom_ribbon(aes(ymax = X90., ymin =X10.), fill="steelblue3")
p <- p + geom_ribbon(aes(ymax = X75., ymin =X25.), fill="steelblue1")
p <- p + geom_line(aes(y=X50.), linetype=2)
p <- p + geom_line(aes(y=X90.))
p <- p + geom_line(aes(y=X10.))
p <- p + facet_wrap(~set, ncol=2, scales="free")
p <- p + ylab("Spawning potential (000s t)") + xlab("Year")
#p <- p + ylab("Spawning biomass (000s t)") + xlab("Year")
p <- p + theme_bw()
p <- p + ylim(c(0, NA))
# Add recent
p <- p + geom_line(data=rec_dat1, aes(x=year, y=y1), colour="steelblue3", size=1.1)
p <- p + geom_line(data=rec_dat2, aes(x=year, y=y2), colour="steelblue1", size=1.1)
p <- p + geom_point(data=rec_dat, aes(x=year, y=X50.), colour="black", size=1.1)
# Add latest
p <- p + geom_line(data=lat_dat1, aes(x=year, y=y1), colour="steelblue3", size=1.1)
p <- p + geom_line(data=lat_dat2, aes(x=year, y=y2), colour="steelblue1", size=1.1)
p <- p + geom_point(data=lat_dat, aes(x=year, y=X50.), colour="black", size=1.1)
p
# Just diagnostic
# Needs units!
p <- ggplot(dat=subset(sb, qname==diagnostic), aes(x=year, y=data/1000))
p <- p + geom_line(colour="steelblue", size=1.2)
p <- p + facet_wrap(~set, ncol=2, scales="free")
p <- p + ylab("Spawning potential (000s t)") + xlab("Year")
#p <- p + ylab("Spawning biomass (000s t)") + xlab("Year")
p <- p + theme_bw()
#p <- p + geom_hline(aes(yintercept=0.2), linetype=2)
p <- p + ylim(c(0, NA))
p
rec_dat1
sb_recent_5
sbsbf0_recentqs
sbsbf0_recent
sbsbf0_recent_5
median(sbsbf0_recent_5$data)
median(sbsbf0_recent_5$data,na.exclude)
median(sbsbf0_recent_5$data,na.exclude(sbsbf0_5))
sbsbf0_recent$set<- factor(sbsbf0$set, levels=c("Region 1", "Region 2", "Region 3", "Region 4", "Region 5","Region 6","Region 7","Region 8", "All regions"))
sbsbf0_recent
sbsbf0_latest_5
rec_dat
sbsbf0_recentqs
sbsbf0_recentqs <- sbsbf0_recent %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data, probs=quantiles, na.rm=TRUE))))
sbsbf0_latestqs <- sbsbf0_latest %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data, probs=quantiles, na.rm=TRUE))))
sbsbf0_recentqs
sbsbf0_recent
model_main_folder <-  "C:/git/PacificCommunity/ofp-sam/grid_skj22/Model_runs/SKJ_3_18July/"
model_folders <- sort(list.dirs(model_main_folder, full.names=FALSE, recursive=FALSE))
# Check length is correct and make some names from the folder names
length(model_folders)
model_names <-  model_folders
# Get the data and stuff into lists
# We need to fill all these up
rep_list <- list()
par_list <- list()
frq_list <- list()
ll_list <- list()
lfit_list <- list()
catch_list <- list()
sp <- "skj"
for (model in model_names){
cat("Processing model data for: ", model, "\n")
main_model_folder <- NULL
# Is it M1 or M2
# if(grepl("T", model)){
main_model_folder <- model_main_folder
main_model_folder <- main_model_folder
# For the M1 folder only
rep_no <- "09"
par_no <- "09"
rep <- read.MFCLRep(paste(main_model_folder, model, "/plot-",rep_no,".par.rep", sep=""))
rep_list[[model]] <- rep
par <- read.MFCLPar(paste(main_model_folder, model, "/", par_no, ".par", sep=""))
par_list[[model]] <- par
catchskj <- read.MFCLCatch(paste(main_model_folder, model, "/", "catch.rep", sep=""),dimensions=dimensions(rep), rnge=range(rep))
catch_list[[model]] <- catchskj
#read.MFCLCatch('catch.rep', dimensions=dimensions(rep), rnge=range(rep))
# All frqs the same - so if missing just grab one from anywhere
frqexists <- file.exists(paste(main_model_folder, model, "/",sp,".frq", sep=""))
if(frqexists){
frq <- read.MFCLFrq(paste(main_model_folder, model, "/",sp,".frq", sep=""))
} else {
frq <- frq_list[[1]] # Well dodgy
}
frq_list[[model]] <- frq
ll <- read.MFCLLikelihood(paste(main_model_folder, model, "/test_plot_output", sep=""))
ll_list[[model]] <- ll
lfit <- read.MFCLLenFit2(paste(main_model_folder, model, "/","length.fit", sep=""), get_lenage = FALSE)
lfit_list[[model]] <- lfit
# Could do catch data too - but not sure we need it
# Get tagging data for some models
if(grepl("tag", model)){
tagrep <- read.temporary_tag_report(paste(main_model_folder, model, "/temporary_tag_report", sep=""))
tagrep_list[[model]] <- tagrep
# Better to specify the tag file name somewhere
tagobs <- read.MFCLTag(paste(main_model_folder, model, "/",sp,".tag", sep=""))
tagobs_list[[model]] <- tagobs
}
}
# Skinny the frqfile - just include realisations
frqreal_list <- lapply(frq_list, realisations)
fishery_map
fishgrp_fisheries <- list(PL_ALL = grep("PL ALL", fishery_map$fishery_name),
PS_ALL = grep("PS ALL", fishery_map$fishery_name),
LL_ALL = grep("LL ALL", fishery_map$fishery_name),
DOM = which(fishery_map$group == "DOM"),
PS_ASS = which(fishery_map$group == "PS ASS"),
PS_UNASS = which(fishery_map$group == "PS UNASS"),
IDX = which(fishery_map$group == "Index"))
# Drop the tag models
all_models <- names(rep_list)[!grepl("tag", names(rep_list))]
all_models
length(all_models)
diagnostic <- "T2G10.8"
# Area groupings
reps1 <- lapply(rep_list, trim, area=1)
reps2 <- lapply(rep_list, trim, area=2)
reps3 <- lapply(rep_list, trim, area=3)
reps4 <- lapply(rep_list, trim, area=4)
reps5 <- lapply(rep_list, trim, area=5)
reps6 <- lapply(rep_list, trim, area=6)
reps7 <- lapply(rep_list, trim, area=7)
reps8 <- lapply(rep_list, trim, area=8)
quantiles <- c(0.10, 0.20, 0.25, 0.50, 0.75, 0.80, 0.90)
# Do for both sets of models
#for (fname in c("all_models", "good_models")){
fname <- "all_models"
model_set <- get(fname)
# Just do SBSBF0 instantaneous
# Instantaneous
sbsbf0_all <- as.data.frame(FLQuants(SBSBF0(rep_list[model_set])))
sbsbf0_1 <- as.data.frame(FLQuants(SBSBF0(reps1[model_set])))
sbsbf0_2 <- as.data.frame(FLQuants(SBSBF0(reps2[model_set])))
sbsbf0_3 <- as.data.frame(FLQuants(SBSBF0(reps3[model_set])))
sbsbf0_4 <- as.data.frame(FLQuants(SBSBF0(reps4[model_set])))
sbsbf0_5 <- as.data.frame(FLQuants(SBSBF0(reps5[model_set])))
sbsbf0_6 <- as.data.frame(FLQuants(SBSBF0(reps6[model_set])))
sbsbf0_7 <- as.data.frame(FLQuants(SBSBF0(reps7[model_set])))
sbsbf0_8 <- as.data.frame(FLQuants(SBSBF0(reps8[model_set])))
sbsbf0_5
median(sbsbf0_5$data)
# Put all this together
sbsbf0 <- rbind(cbind(sbsbf0_all, set="All regions"),
cbind(sbsbf0_1, set="Region 1"),
cbind(sbsbf0_2, set="Region 2"),
cbind(sbsbf0_3, set="Region 3"),
cbind(sbsbf0_4, set="Region 4"),
cbind(sbsbf0_5, set="Region 5"),
cbind(sbsbf0_6, set="Region 6"),
cbind(sbsbf0_7, set="Region 7"),
cbind(sbsbf0_8, set="Region 8"))[,c("year", "data", "qname", "set")]
sbsbf0$set<- factor(sbsbf0$set, levels=c("Region 1", "Region 2", "Region 3", "Region 4", "Region 5","Region 6","Region 7","Region 8", "All regions"))
# Do quantiles, 10-90, 25-75
sbsbf0qs <- sbsbf0 %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data, probs=quantiles, na.rm=TRUE))))
# Get SBSBF=0 recent and latest in final year
sbsbf0_recent_all <- as.data.frame(FLQuants(SBSBF0recent(rep_list[model_set])))
sbsbf0_recent_1 <- as.data.frame(FLQuants(SBSBF0recent(reps1[model_set])))
sbsbf0_recent_2 <- as.data.frame(FLQuants(SBSBF0recent(reps2[model_set])))
sbsbf0_recent_3 <- as.data.frame(FLQuants(SBSBF0recent(reps3[model_set])))
sbsbf0_recent_4 <- as.data.frame(FLQuants(SBSBF0recent(reps4[model_set])))
sbsbf0_recent_5 <- as.data.frame(FLQuants(SBSBF0recent(reps5[model_set])))
sbsbf0_recent_6 <- as.data.frame(FLQuants(SBSBF0recent(reps6[model_set])))
sbsbf0_recent_7 <- as.data.frame(FLQuants(SBSBF0recent(reps7[model_set])))
sbsbf0_recent_8 <- as.data.frame(FLQuants(SBSBF0recent(reps8[model_set])))
median(sbsbf0_recent_5$data)
sbsbf0_recent_5
sbsbf0qs
# Put all this together
sbsbf0_recent <- rbind(cbind(sbsbf0_recent_all, set="All regions"),
cbind(sbsbf0_recent_1, set="Region 1"),
cbind(sbsbf0_recent_2, set="Region 2"),
cbind(sbsbf0_recent_3, set="Region 3"),
cbind(sbsbf0_recent_4, set="Region 4"),
cbind(sbsbf0_recent_5, set="Region 5"),
cbind(sbsbf0_recent_6, set="Region 6"),
cbind(sbsbf0_recent_7, set="Region 7"),
cbind(sbsbf0_recent_8, set="Region 8"))[,c("year", "data", "qname", "set")]
sbsbf0_recent$set<- factor(sbsbf0$set, levels=c("Region 1", "Region 2", "Region 3", "Region 4", "Region 5","Region 6","Region 7","Region 8", "All regions"))
sbsbf0_latest_all <- as.data.frame(FLQuants(SBSBF0latest(rep_list[model_set])))
sbsbf0_latest_1 <- as.data.frame(FLQuants(SBSBF0latest(reps1[model_set])))
sbsbf0_latest_2 <- as.data.frame(FLQuants(SBSBF0latest(reps2[model_set])))
sbsbf0_latest_3 <- as.data.frame(FLQuants(SBSBF0latest(reps3[model_set])))
sbsbf0_latest_4 <- as.data.frame(FLQuants(SBSBF0latest(reps4[model_set])))
sbsbf0_latest_5 <- as.data.frame(FLQuants(SBSBF0latest(reps5[model_set])))
sbsbf0_latest_6 <- as.data.frame(FLQuants(SBSBF0latest(reps6[model_set])))
sbsbf0_latest_7 <- as.data.frame(FLQuants(SBSBF0latest(reps7[model_set])))
sbsbf0_latest_8 <- as.data.frame(FLQuants(SBSBF0latest(reps8[model_set])))
# Put all this together
sbsbf0_latest <- rbind(cbind(sbsbf0_latest_all, set="All regions"),
cbind(sbsbf0_latest_1, set="Region 1"),
cbind(sbsbf0_latest_2, set="Region 2"),
cbind(sbsbf0_latest_3, set="Region 3"),
cbind(sbsbf0_latest_4, set="Region 4"),
cbind(sbsbf0_latest_5, set="Region 5"),
cbind(sbsbf0_latest_6, set="Region 6"),
cbind(sbsbf0_latest_7, set="Region 7"),
cbind(sbsbf0_latest_8, set="Region 8"))[,c("year", "data", "qname", "set")]
sbsbf0_latest$set<- factor(sbsbf0$set, levels=c("Region 1", "Region 2", "Region 3", "Region 4", "Region 5","Region 6","Region 7","Region 8", "All regions"))
sbsbf0_recentqs <- sbsbf0_recent %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data, probs=quantiles, na.rm=TRUE))))
sbsbf0_latestqs <- sbsbf0_latest %>% group_by(year, set) %>% do(data.frame(t(quantile(.$data, probs=quantiles, na.rm=TRUE))))
sbsbf0_recentqs
rec_dat <- subset(sbsbf0_recentqs, year==2021)
rec_dat %<>% mutate(year=2022)
rec_dat
# This is total fucking shit
rec_dat1 <- rec_dat %>% select(year, set, X10., X90.) %>% pivot_longer(cols=c(X10., X90.), names_to = "outer", values_to = "y1")
rec_dat2 <- rec_dat %>% select(year, set, X25., X75.) %>% pivot_longer(cols=c(X25., X75.), names_to = "inner", values_to = "y2")
lat_dat <- subset(sbsbf0_latestqs, year==2021)
lat_dat %<>% mutate(year=2023)
lat_dat1 <- lat_dat %>% select(year, set, X10., X90.) %>% pivot_longer(cols=c(X10., X90.), names_to = "outer", values_to = "y1")
lat_dat2 <- lat_dat %>% select(year, set, X25., X75.) %>% pivot_longer(cols=c(X25., X75.), names_to = "inner", values_to = "y2")
rec_dat1
lat_dat
rec_dat
lat_dat
model_main_folder
model_folders
model
model_names
library(r4ss)
library(dplyr)
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
SS_plots(cat,plot = c(1:20,22:26))
SS_plots(cat,plot = c(21))
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
SS_plots(cat,plot = c(1:20,22:26))
SS_plots(cat,plot = c(21))
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=FALSE)
SS_plots(cat,plot = c(1:20,22:26))
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=FALSE)
SS_plots(cat,plot = c(1:20,22:26))
SS_plots(cat,plot = c(21))
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
SS_plots(cat,plot = c(1:20,22:26))
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
SS_plots(cat,plot = c(1:20,22:26))
SS_plots(cat,plot = c(21))
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
SS_plots(cat,plot = c(1:20,22:26))
DM_parm_info <- tune_comps(
option = "DM",
niters_tuning = 0, # 0 means the model will not be run.
dir = mod_path,
verbose = FALSE
)
# Add Dirichlet-multinomial tuning parameters to the model,
# without running it.
mod_path <- ("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2")
DM_parm_info <- tune_comps(
option = "DM",
niters_tuning = 0, # 0 means the model will not be run.
dir = mod_path,
verbose = FALSE
)
# See the Dirichlet parameters added to the model.
DM_parm_info[["tuning_table_list"]]
?DM_parm_info
??DM_parm_info
tune_comps()
?tune_comps
DM_parm_info <- tune_comps(
option = "DM",fleets = c(1:41),
niters_tuning = 0, # 0 means the model will not be run.
dir = mod_path,
verbose = FALSE
)
DM_parm_info <- tune_comps(
option = "DM",fleets = c(1:41),
niters_tuning = 0, # 0 means the model will not be run.
dir = mod_path,
verbose = FALSE
)
debug(tune_comps)
DM_parm_info <- tune_comps(
option = "DM",fleets = c(1:41),
niters_tuning = 0, # 0 means the model will not be run.
dir = mod_path,
verbose = FALSE
)
option
debugonce(SS_output)
replist <- try(SS_output(dir = dir, verbose = FALSE,
hidewarn = TRUE, printstats = FALSE))
readwt
SS_readwtatage(file = wtfile, verbose = verbose)
args(tune_comps)
?tune_comps
debug(SS_readwtatage)
dir(mod_path)
unlink(file.path(mod_path, "wtatage.ss_new"))
debugonce(tune_comps)
DM_parm_info <- tune_comps(
option = "DM",
fleets = c(1:41),
niters_tuning = 0, # 0 means the model will not be run.
dir = mod_path,
verbose = FALSE
)
fleets[fleets %in% unique(dat[["agecomp"]][,
"FltSvy"])]
undebug(SS_readwtatage)
debug(tune_comps)
DM_parm_info <- tune_comps(
option = "DM",
fleets = c(1:41),
niters_tuning = 0, # 0 means the model will not be run.
dir = mod_path,
verbose = FALSE
)
function (replist = NULL, fleets = "all", option = c("Francis",
"MI", "none", "DM"), digits = 6, write = TRUE, niters_tuning = 0,
init_run = FALSE, dir = getwd(), exe = "ss", model = lifecycle::deprecated(),
extras = "", allow_up_tuning = FALSE, verbose = TRUE, ...)
"""""
dat[["age_info"]][fleets_age, "CompError"]
dat[["age_info"]]
fleets_age
dat[["len_info"]][fleets_len, "ParmSelect"]
seq_len(length(fleets_len))
(length(fleets_len) +
1):(length(fleets_len) + length(fleets_age))
length(fleets_age)
dat[["len_info"]][fleets_len, "ParmSelect"] <- seq_len(length(fleets_len))
length(fleets_len) + length(fleets_age)
npars <- length(fleets_len) + length(fleets_age)
last_phase <- get_last_phase(ctl)
last_phase >= start[["last_estimation_phase"]]
data.frame(LO = rep(-5,
times = npars), HI = 20, INIT = 0.5, PRIOR = 0,
PR_SD = 1.813, PR_type = 6, PHASE = last_phase +
1, `env_var&link` = 0, dev_link = 0, dev_minyr = 0,
dev_maxyr = 0, dev_PH = 0, Block = 0, Block_Fxn = 0)
ctl[["dirichlet_parms"]] <- data.frame(LO = rep(-5,
times = npars), HI = 20, INIT = 0.5, PRIOR = 0,
PR_SD = 1.813, PR_type = 6, PHASE = last_phase +
1, `env_var&link` = 0, dev_link = 0, dev_minyr = 0,
dev_maxyr = 0, dev_PH = 0, Block = 0, Block_Fxn = 0)
!is.null(ctl[["Variance_adjustment_list"]])
SS_writedat(dat, file.path(dir, start[["datfile"]]),
verbose = FALSE, overwrite = TRUE)
SS_writectl(ctl, file.path(dir, start[["ctlfile"]]),
verbose = FALSE, overwrite = TRUE)
niters_tuning > 0
weights <- ctl[["dirichlet_parms"]]
tuning_table_list <- ctl[["dirichlet_parms"]]
return_list <- list(tuning_table_list = tuning_table_list,
weights = weights)
DM_parm_info<<-return_list
ls()
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
SS_plots(cat,plot = c(1:20,22:26))
cat$parameters
cat$parameters %>% filter(grepl("DM", Label))
cat$parameters$Label
cat$parameters$Label[1000:2000]
cat$parameters$Label[3000:4000]
cat$parameters$Label[5000:5500]
cat$parameters$Label %>% strplit(., "_")
cat$parameters$Label %>% strsplit(., "_")
grep("DM", cat$parameters$Label)
grep("theta", cat$parameters$Label)
grep("ln", cat$parameters$Label)
grep("ln", row.names(cat$parameters))
row.names(cat$parameters)
getOption(max.print = 5000)
options(max.print = 5000)
row.names(cat$parameters)
options(max.print = 6000)
row.names(cat$parameters)
options(max.print = 7000)
row.names(cat$parameters)
options(max.print = 100)
row.names(cat$parameters)
row.names(cat$parameters) %>% gsub("_[0-9]+", "", .) %>% table
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=FALSE)
SS_plots(cat,plot = c(1:20,22:26))
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=FALSE)
SS_plots(cat,plot = c(1:20,22:26))
cat$$Dirichlet_Multinomial_pars
cat$Dirichlet_Multinomial_pars
options(max.print = 100)
cat$Dirichlet_Multinomial_pars
cat$Dirichlet_Multinomial_pars[1:41]
tail(cat$Dirichlet_Multinomial_pars)
(cat$Dirichlet_Multinomial_pars)
options(max.print)
options(max.print=50)
(cat$Dirichlet_Multinomial_pars)
cat$Dirichlet_Multinomial_pars
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=TRUE)
SS_plots(cat,plot = c(1:20,22:26))
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=FALSE)
SS_plots(cat,plot = c(1:20,22:26))
input_data <- r4ss::copy_SS_inputs(
dir.old = "C:/git/PacificCommunity/ofp-sam/ofp-sam-skj-2022-synthesis/model_input/8_regions",
dir.new = "C:/git/PacificCommunity/ofp-sam/ofp-sam-skj-2022-synthesis/model_ouput/8_regions_results",
verbose = FALSE,
overwrite = TRUE
)
input_data
#run with no hessian
system("ss.exe -nohess") #version 3.20
cat <- SS_output("C:/StockAssessment/SS_models/SS_SKJ/SKJ8v20_season_2", covar=FALSE)
SS_plots(cat,plot = c(1:20,22:26))
setwd(run_results)
run_results = ("C:/git/PacificCommunity/ofp-sam/ofp-sam-skj-2022-synthesis/model_ouput/8_regions_results")
setwd(run_results)
#run with no hessian
system("ss.exe -nohess") #version 3.20
